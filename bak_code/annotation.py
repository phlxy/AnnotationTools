import sys
import json
import os
from validator import AnnotationValidator
from autosaver import AutoSaver
from document_loader import DocumentLoader
from PyQt6.QtWidgets import QSplitter
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                            QHBoxLayout, QPushButton, QLabel, QComboBox, 
                            QFileDialog, QListWidget, QListWidgetItem, QScrollArea,QMessageBox)
from PyQt6.QtGui import QPixmap, QPainter, QPen, QColor, QImage
from PyQt6.QtCore import Qt, QRect, QPoint
from PyQt6.QtWidgets import QFrame
from PyQt6.QtCore import Qt

class AnnotationTool(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ Annotation ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
        self.setGeometry(100, 100, 1200, 800)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô __init__
        self.file_annotations = {}  # ‡πÄ‡∏Å‡πá‡∏ö annotations ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå

        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î
        self.image_path = None
        self.original_pixmap = None
        self.scaled_pixmap = None
        self.drawing = False
        self.start_point = None
        self.current_box = None
        self.annotations = []
        self.scale_factor = 1.0

        self.zoom_factor = 1.0
        self.min_zoom = 0.1
        self.max_zoom = 5.0
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î labels ‡πÅ‡∏•‡∏∞‡∏™‡∏µ
        self.labels = {
            '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°': '#FF0000',
            '‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á': '#00FF00',
            '‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô': '#0000FF',
            '‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö': '#FFFF00',
            '‡∏ï‡∏≤‡∏£‡∏≤‡∏á': '#FF00FF',
            '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': '#00FFFF',
            '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠': '#FF8800'
        }
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ label ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        self.label_descriptions = {
            "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å": {
                '‡∏ó‡∏µ‡πà': '‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏ó 0123.4/123)',
                '‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£': '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á',
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô 1 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2567)',
                '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á': '‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
                '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô': '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
                '‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á': '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)',
                '‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢': '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)',
                '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°': '‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
                '‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠': '‡∏•‡∏≤‡∏¢‡∏°‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ô‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
                '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á': '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ô‡∏≤‡∏°'
            },
            "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô": {
                '‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£': '‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á',
                '‡∏ó‡∏µ‡πà': '‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô',
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
                '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á': '‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
                '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô': '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
                '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°': '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠',
                '‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠': '‡∏•‡∏≤‡∏¢‡∏°‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
                '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á': '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'
            },
            "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏ï‡∏£‡∏≤": {
                '‡∏ó‡∏µ‡πà': '‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏ï‡∏£‡∏≤',
                '‡∏ñ‡∏∂‡∏á': '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
                '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á': '‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
                '‡∏ï‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö': '‡∏ï‡∏£‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£',
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
                '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°': '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠'
            }
        }
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° labels ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        self.document_labels = {
            "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å": {
                '‡∏ó‡∏µ‡πà': '#FF0000',
                '‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£': '#00FF00',
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': '#0000FF',
                '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á': '#FFFF00',
                '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô': '#FF00FF',
                '‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á': '#00FFFF',
                '‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢': '#FF8800',
                '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°': '#808080',
                '‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠': '#008080',
                '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á': '#800080'
            },
            "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô": {
                '‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£': '#FF0000',
                '‡∏ó‡∏µ‡πà': '#00FF00',
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': '#0000FF',
                '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á': '#FFFF00',
                '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô': '#FF00FF',
                '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°': '#808080',
                '‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠': '#008080',
                '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á': '#800080'
            },
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        }

        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
        self.labels = self.document_labels["‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å"]
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° validator
        self.validator = AnnotationValidator(self.label_descriptions)
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° AutoSaver
        self.autosaver = AutoSaver(self)
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° document loader
        self.doc_loader = DocumentLoader()
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        self.current_document = None  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        self.file_annotations = {}    # ‡πÄ‡∏Å‡πá‡∏ö annotations ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå
        self.setup_ui()

    def setup_ui(self):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á widget ‡∏´‡∏•‡∏±‡∏Å
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QVBoxLayout(main_widget)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î window
        self.setGeometry(100, 100, 1400, 1000)

        # Toolbar ‡∏ä‡∏∏‡∏î‡πÅ‡∏£‡∏Å
        toolbar = QHBoxLayout()
        toolbar.setContentsMargins(0, 0, 0, 10)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Document Type Selector
        self.doc_type_label = QLabel("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:")
        self.doc_type_combo = QComboBox()
        self.doc_type_combo.addItems([
            "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å",
            "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô",
            "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏ï‡∏£‡∏≤",
            "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á",
            "‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö",
            "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®"
        ])
        self.doc_type_combo.setFixedWidth(150)
        toolbar.addWidget(self.doc_type_label)
        toolbar.addWidget(self.doc_type_combo)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° separator
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.VLine)
        separator.setFrameShadow(QFrame.Shadow.Sunken)
        toolbar.addWidget(separator)

        # ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        self.load_button = QPushButton("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        self.load_button.clicked.connect(self.load_image)
        self.load_button.setFixedWidth(100)
        toolbar.addWidget(self.load_button)

        # ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
        self.load_batch_button = QPushButton("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå")
        self.load_batch_button.clicked.connect(self.load_batch_files)
        self.load_batch_button.setFixedWidth(100)
        toolbar.addWidget(self.load_batch_button)

        self.label_combo = QComboBox()
        self.label_combo.addItems(self.labels.keys())
        self.label_combo.setFixedWidth(150)
        toolbar.addWidget(self.label_combo)

        # ‡∏õ‡∏∏‡πà‡∏° zoom
        self.zoom_out_button = QPushButton("üîç-")
        self.zoom_out_button.clicked.connect(self.zoom_out)
        self.zoom_out_button.setFixedWidth(50)
        toolbar.addWidget(self.zoom_out_button)

        self.zoom_reset_button = QPushButton("100%")
        self.zoom_reset_button.clicked.connect(self.zoom_reset)
        self.zoom_reset_button.setFixedWidth(60)
        toolbar.addWidget(self.zoom_reset_button)

        self.zoom_in_button = QPushButton("üîç+")
        self.zoom_in_button.clicked.connect(self.zoom_in)
        self.zoom_in_button.setFixedWidth(50)
        toolbar.addWidget(self.zoom_in_button)

        self.undo_button = QPushButton("‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö")
        self.undo_button.clicked.connect(self.undo_last)
        self.undo_button.setFixedWidth(100)
        toolbar.addWidget(self.undo_button)

        # ‡πÅ‡∏ó‡∏ô‡∏õ‡∏∏‡πà‡∏° export ‡πÄ‡∏î‡∏¥‡∏°
        self.export_menu = QComboBox()
        self.export_menu.addItems(["JSON ‡∏õ‡∏Å‡∏ï‡∏¥", "LayoutLM Format"])
        self.export_menu.setFixedWidth(120)
        toolbar.addWidget(self.export_menu)

        self.export_button = QPushButton("‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å")
        self.export_button.clicked.connect(self.export_by_format)
        self.export_button.setFixedWidth(100)
        toolbar.addWidget(self.export_button)

        toolbar.addStretch()
        layout.addLayout(toolbar)

        self.save_button = QPushButton("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        self.save_button.clicked.connect(self.save_current_annotations)
        self.save_button.setFixedWidth(100)
        toolbar.addWidget(self.save_button)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á widget ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        content_widget = QWidget()
        content_layout = QHBoxLayout(content_widget)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
        self.file_list_widget = QListWidget()
        self.file_list_widget.setMaximumWidth(300)
        self.file_list_widget.itemClicked.connect(self.load_selected_file)
        content_layout.addWidget(self.file_list_widget)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á splitter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        splitter = QSplitter(Qt.Orientation.Vertical)
        
        # Scroll Area ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setMinimumHeight(800)
        
        self.image_label = QLabel()
        self.image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        scroll_area.setWidget(self.image_label)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° scroll area ‡πÄ‡∏Ç‡πâ‡∏≤ splitter
        splitter.addWidget(scroll_area)
        
        # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ annotations
        annotation_widget = QWidget()
        annotation_layout = QVBoxLayout(annotation_widget)
        
        header_label = QLabel("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Annotations:")
        header_label.setStyleSheet("font-weight: bold; margin-bottom: 5px;")
        annotation_layout.addWidget(header_label)
        
        self.annotation_list = QListWidget()
        self.annotation_list.setMaximumHeight(150)
        self.annotation_list.itemDoubleClicked.connect(self.delete_annotation)
        annotation_layout.addWidget(self.annotation_list)
        
        splitter.addWidget(annotation_widget)
        splitter.setSizes([800, 200])
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° splitter ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô content_layout
        content_layout.addWidget(splitter, stretch=1)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° content_widget ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô layout ‡∏´‡∏•‡∏±‡∏Å
        layout.addWidget(content_widget)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° signal handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        self.doc_type_combo.currentTextChanged.connect(self.update_labels_for_document_type)
        # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á combo boxes
        self.setup_label_tooltips()
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° export
        self.validate_button = QPushButton("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        self.validate_button.clicked.connect(self.validate_current)
        self.validate_button.setFixedWidth(100)
        toolbar.addWidget(self.validate_button)
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        load_button = QPushButton("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
        load_button.clicked.connect(self.load_document)
        toolbar.addWidget(load_button)

    def load_document(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (PDF ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)"""
        file_name, _ = QFileDialog.getOpenFileName(
            self, 
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
            "",
            "Documents (*.pdf *.jpg *.jpeg *.png)"
        )
        
        if file_name:
            try:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å annotations ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
                if self.image_path and self.annotations:
                    self.save_current_annotations()
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó autosaver
                    self.autosaver.update_current_data({
                        'image_path': self.image_path,
                        'document_type': self.doc_type_combo.currentText(),
                        'annotations': self.annotations,
                        'image_size': {
                            'width': self.original_pixmap.width(),
                            'height': self.original_pixmap.height()
                        }
                    })

                # ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
                self.current_document = {
                    'path': file_name,
                    'pages': self.doc_loader.load_document(file_name)
                }
                
                # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
                self.file_list_widget.clear()
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
                for page in self.current_document['pages']:
                    if page['type'] == 'pdf_page':
                        display_name = f"‡∏´‡∏ô‡πâ‡∏≤ {page['page']}"
                    else:
                        display_name = os.path.basename(page['path'])
                        
                    item = QListWidgetItem(display_name)
                    item.setData(Qt.ItemDataRole.UserRole, page)
                    self.file_list_widget.addItem(item)
                
                # ‡πÇ‡∏´‡∏•‡∏î autosave ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                autosave_data = self.autosaver.check_for_autosave(file_name)
                if autosave_data:
                    reply = QMessageBox.question(
                        self,
                        '‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
                        '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                        QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
                    )
                    if reply == QMessageBox.StandardButton.Yes:
                        self.annotations = autosave_data['annotations']
                        self.doc_type_combo.setCurrentText(autosave_data['document_type'])
                        self.file_annotations[file_name] = self.annotations.copy()
                
            except Exception as e:
                QMessageBox.warning(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ: {str(e)}")

    def load_selected_file(self, item):
        """‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
        try:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å annotations ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            if self.image_path and self.annotations:
                self.file_annotations[self.image_path] = self.annotations.copy()
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó autosaver
                self.autosaver.update_current_data({
                    'image_path': self.image_path,
                    'document_type': self.doc_type_combo.currentText(),
                    'annotations': self.annotations,
                    'image_size': {
                        'width': self.original_pixmap.width(),
                        'height': self.original_pixmap.height()
                    }
                })

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô item
            page_data = item.data(Qt.ItemDataRole.UserRole)
            
            if isinstance(page_data, str):
                self.image_path = page_data
            elif isinstance(page_data, dict):
                self.image_path = page_data['path']
            else:
                return
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
            image = QImage(self.image_path)
            if image.isNull():
                QMessageBox.warning(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
                return
                
            self.original_pixmap = QPixmap.fromImage(image)
            
            # ‡πÇ‡∏´‡∏•‡∏î annotations ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            if self.image_path in self.file_annotations:
                self.annotations = self.file_annotations[self.image_path].copy()
            else:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö autosave
                autosave_data = self.autosaver.check_for_autosave(self.image_path)
                if autosave_data:
                    reply = QMessageBox.question(
                        self,
                        '‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
                        '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                        QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
                    )
                    if reply == QMessageBox.StandardButton.Yes:
                        self.annotations = autosave_data['annotations']
                        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô autosaver
                        self.autosaver.update_current_data(autosave_data)
                    else:
                        self.annotations = []
                else:
                    self.annotations = []
            
            self.update_annotation_list()
            self.show_image()
            
        except Exception as e:
            print(f"Error in load_selected_file: {str(e)}")
            QMessageBox.warning(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}")

    def export_layoutlm_format(self, directory):
        """Export ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö LayoutLMv3"""
        if self.current_document:
            for page in self.current_document['pages']:
                image_path = page['path']
                if image_path in self.file_annotations:
                    annotations = self.file_annotations[image_path]
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
                    if page['type'] == 'pdf_page':
                        basename = f"{os.path.splitext(os.path.basename(page['original_path']))[0]}_page_{page['page']}"
                    else:
                        basename = os.path.splitext(os.path.basename(page['original_path']))[0]
                        
                    json_name = f"{basename}_layoutlm.json"
                    save_path = os.path.join(directory, json_name)

                    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LayoutLM
                    layoutlm_data = {
                        'image_path': image_path,
                        'original_path': page['original_path'],
                        'page_number': page.get('page', 1),
                        'document_type': self.doc_type_combo.currentText(),
                        'width': self.original_pixmap.width() if self.original_pixmap else None,
                        'height': self.original_pixmap.height() if self.original_pixmap else None,
                        'layout': {
                            'bbox': [],        # [x1, y1, x2, y2] coordinates
                            'label': [],       # label ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ bbox
                            'words': [],       # text ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ box (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR)
                            'segment_ids': [],  # group ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö boxes ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
                            'confidence': []   # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
                        }
                    }

                    # ‡πÅ‡∏õ‡∏•‡∏á annotations ‡πÄ‡∏õ‡πá‡∏ô format ‡∏Ç‡∏≠‡∏á LayoutLM
                    for ann in annotations:
                        coords = ann['coordinates']
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô list ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà LayoutLM ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                        bbox = [
                            coords['x1'],   # x1
                            coords['y1'],   # y1
                            coords['x2'],   # x2
                            coords['y2']    # y2
                        ]
                        
                        layoutlm_data['layout']['bbox'].append(bbox)
                        layoutlm_data['layout']['label'].append(ann['label'])
                        layoutlm_data['layout']['words'].append("")  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR
                        layoutlm_data['layout']['segment_ids'].append(0)  # default group
                        layoutlm_data['layout']['confidence'].append(1.0)  # default confidence

                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
                    with open(save_path, 'w', encoding='utf-8') as f:
                        json.dump(layoutlm_data, f, ensure_ascii=False, indent=2)

    def closeEvent(self, event):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"""
        self.doc_loader.cleanup()
        event.accept()

    def update_labels_for_document_type(self, document_type):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó labels ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà"""
        if document_type in self.document_labels:
            self.labels = self.document_labels[document_type]
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó combo box
            self.label_combo.clear()
            self.label_combo.addItems(self.labels.keys())
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° tooltips
            self.setup_label_tooltips()

    def zoom_in(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û"""
        if self.zoom_factor < self.max_zoom:
            self.zoom_factor = min(self.zoom_factor * 1.2, self.max_zoom)
            self.update_image()
            self.update_zoom_buttons()

    def zoom_out(self):
        """‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û"""
        if self.zoom_factor > self.min_zoom:
            self.zoom_factor = max(self.zoom_factor * 0.8, self.min_zoom)
            self.update_image()
            self.update_zoom_buttons()

    def zoom_reset(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô 100%"""
        self.zoom_factor = 1.0
        self.update_image()
        self.update_zoom_buttons()

    def update_zoom_buttons(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏° zoom"""
        self.zoom_out_button.setEnabled(self.zoom_factor > self.min_zoom)
        self.zoom_in_button.setEnabled(self.zoom_factor < self.max_zoom)
        self.zoom_reset_button.setText(f"{int(self.zoom_factor * 100)}%")

    def setup_label_tooltips(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° tooltips ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö labels"""
        current_type = self.doc_type_combo.currentText()
        if current_type in self.label_descriptions:
            descriptions = self.label_descriptions[current_type]
            for i in range(self.label_combo.count()):
                label = self.label_combo.itemText(i)
                if label in descriptions:
                    self.label_combo.setItemData(
                        i, 
                        descriptions[label], 
                        Qt.ItemDataRole.ToolTipRole
                    )

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° wheel event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö zoom ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏°‡∏≤‡∏™‡πå
    def wheelEvent(self, event):
        if event.modifiers() == Qt.KeyboardModifier.ControlModifier:
            delta = event.angleDelta().y()
            if delta > 0:
                self.zoom_in()
            else:
                self.zoom_out()
            event.accept()
        else:
            super().wheelEvent(event)


    def load_image(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (PDF ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)"""
        file_name, _ = QFileDialog.getOpenFileName(
            self, 
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
            "",
            "Documents (*.pdf *.jpg *.jpeg *.png)"
        )
        
        if file_name:
            try:
                # ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
                self.current_document = {
                    'path': file_name,
                    'pages': self.doc_loader.load_document(file_name)
                }
                
                # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
                self.file_list_widget.clear()
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
                for page in self.current_document['pages']:
                    if page['type'] == 'pdf_page':
                        display_name = f"‡∏´‡∏ô‡πâ‡∏≤ {page['page']}"
                    else:
                        display_name = os.path.basename(page['path'])
                        
                    item = QListWidgetItem(display_name)
                    item.setData(Qt.ItemDataRole.UserRole, page)
                    self.file_list_widget.addItem(item)
                
            except Exception as e:
                QMessageBox.warning(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ: {str(e)}")

    def show_image(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î"""
        if self.original_pixmap:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            label_size = self.image_label.size()
            scaled_size = self.original_pixmap.size()
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏° zoom factor
            scaled_width = int(scaled_size.width() * self.zoom_factor)
            scaled_height = int(scaled_size.height() * self.zoom_factor)
            
            self.scaled_pixmap = self.original_pixmap.scaled(
                scaled_width,
                scaled_height,
                Qt.AspectRatioMode.KeepAspectRatio,
                Qt.TransformationMode.SmoothTransformation
            )
            
            self.image_label.setPixmap(self.scaled_pixmap)

    def get_image_coordinates(self, pos):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏ö‡∏ô‡∏†‡∏≤‡∏û"""
        if not self.scaled_pixmap:
            return None

        # ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á label ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö window
        label_pos = self.image_label.mapTo(self, QPoint(0, 0))
        
        # ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô label
        label_rect = self.image_label.rect()
        pixmap_rect = self.scaled_pixmap.rect()
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì offset ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å center ‡πÉ‡∏ô label
        x_offset = (label_rect.width() - pixmap_rect.width()) // 2
        y_offset = (label_rect.height() - pixmap_rect.height()) // 2
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
        image_x = pos.x() - label_pos.x() - x_offset
        image_y = pos.y() - label_pos.y() - y_offset
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ö‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        original_x = int(image_x / self.zoom_factor)
        original_y = int(image_y / self.zoom_factor)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
        original_x = max(0, min(original_x, self.original_pixmap.width() - 1))
        original_y = max(0, min(original_y, self.original_pixmap.height() - 1))
        
        return QPoint(original_x, original_y)

    def mousePressEvent(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÄ‡∏°‡∏≤‡∏™‡πå"""
        if not self.original_pixmap:
            return
            
        # ‡∏´‡∏≤ label position
        label_pos = self.image_label.mapTo(self, QPoint(0, 0))
        label_rect = QRect(label_pos, self.image_label.size())
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
        if label_rect.contains(event.pos()):
            mouse_pos = self.get_image_coordinates(event.pos())
            if mouse_pos:
                self.drawing = True
                self.start_point = mouse_pos

    def mouseMoveEvent(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå"""
        if not self.drawing or not self.original_pixmap:
            return
            
        mouse_pos = self.get_image_coordinates(event.pos())
        if mouse_pos and self.start_point:
            self.current_box = QRect(self.start_point, mouse_pos).normalized()
            self.update_image()

    def mouseReleaseEvent(self, event):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î annotation ‡πÉ‡∏´‡∏°‡πà"""
        if not self.drawing or not self.original_pixmap:
            return
            
        mouse_pos = self.get_image_coordinates(event.pos())
        if mouse_pos and self.start_point:
            rect = QRect(self.start_point, mouse_pos).normalized()
            
            if rect.width() > 5 and rect.height() > 5:
                self.annotations.append({
                    'label': self.label_combo.currentText(),
                    'coordinates': {
                        'x1': rect.left(),
                        'y1': rect.top(),
                        'x2': rect.right(),
                        'y2': rect.bottom()
                    }
                })
                self.update_annotation_list()
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó autosaver
                self.autosaver.update_current_data({
                    'image_path': self.image_path,
                    'document_type': self.doc_type_combo.currentText(),
                    'annotations': self.annotations,
                    'image_size': {
                        'width': self.original_pixmap.width(),
                        'height': self.original_pixmap.height()
                    }
                })
        
        self.drawing = False
        self.current_box = None
        self.update_image()


    def update_image(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö annotations ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á zoom factor"""
        if not self.original_pixmap:
            return

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á zoom
        orig_width = self.original_pixmap.width()
        orig_height = self.original_pixmap.height()
        scaled_width = int(orig_width * self.zoom_factor)
        scaled_height = int(orig_height * self.zoom_factor)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á scaled pixmap
        temp_pixmap = self.original_pixmap.scaled(
            scaled_width,
            scaled_height,
            Qt.AspectRatioMode.KeepAspectRatio,
            Qt.TransformationMode.SmoothTransformation
        )

        # ‡∏ß‡∏≤‡∏î annotations ‡∏ö‡∏ô scaled pixmap
        painter = QPainter(temp_pixmap)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)

        # ‡∏ß‡∏≤‡∏î annotations ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        for ann in self.annotations:
            color = QColor(self.labels[ann['label']])
            painter.setPen(QPen(color, max(1, int(3 * self.zoom_factor)), Qt.PenStyle.SolidLine))
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≤‡∏° zoom
            x1 = int(ann['coordinates']['x1'] * self.zoom_factor)
            y1 = int(ann['coordinates']['y1'] * self.zoom_factor)
            x2 = int(ann['coordinates']['x2'] * self.zoom_factor)
            y2 = int(ann['coordinates']['y2'] * self.zoom_factor)
            
            # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
            painter.drawRect(x1, y1, x2 - x1, y2 - y1)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á label
            font = painter.font()
            font.setPointSize(max(8, int(10 * self.zoom_factor)))  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏≤‡∏° zoom
            painter.setFont(font)
            
            # ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label
            text_rect = painter.fontMetrics().boundingRect(ann['label'])
            bg_rect = QRect(x1, y1 - text_rect.height(), text_rect.width() + 10, text_rect.height())
            painter.fillRect(bg_rect, QColor(255, 255, 255, 200))  # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
            
            # ‡∏ß‡∏≤‡∏î label
            painter.drawText(x1 + 5, y1 - 5, ann['label'])

        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if self.current_box:
            current_label = self.label_combo.currentText()
            color = QColor(self.labels[current_label])
            painter.setPen(QPen(color, max(1, int(3 * self.zoom_factor)), Qt.PenStyle.SolidLine))
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡∏≤‡∏° zoom
            x = int(self.current_box.x() * self.zoom_factor)
            y = int(self.current_box.y() * self.zoom_factor)
            w = int(self.current_box.width() * self.zoom_factor)
            h = int(self.current_box.height() * self.zoom_factor)
            
            # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
            painter.drawRect(x, y, w, h)
            
            # ‡∏ß‡∏≤‡∏î label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            font = painter.font()
            font.setPointSize(max(8, int(10 * self.zoom_factor)))
            painter.setFont(font)
            
            # ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label
            text_rect = painter.fontMetrics().boundingRect(current_label)
            bg_rect = QRect(x, y - text_rect.height(), text_rect.width() + 10, text_rect.height())
            painter.fillRect(bg_rect, QColor(255, 255, 255, 200))
            
            # ‡∏ß‡∏≤‡∏î label
            painter.drawText(x + 5, y - 5, current_label)

        painter.end()
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó scaled pixmap
        self.scaled_pixmap = temp_pixmap
        self.image_label.setPixmap(self.scaled_pixmap)

    def update_annotation_list(self):
        self.annotation_list.clear()
        for idx, ann in enumerate(self.annotations):
            coords = ann['coordinates']
            item_text = f"{idx + 1}. {ann['label']}: ({coords['x1']}, {coords['y1']}) - ({coords['x2']}, {coords['y2']})"
            self.annotation_list.addItem(item_text)

    def delete_annotation(self, item):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö annotation"""
        idx = self.annotation_list.row(item)
        if idx >= 0:
            self.annotations.pop(idx)
            self.update_annotation_list()
            self.update_image()
            
            # ‡πÅ‡∏à‡πâ‡∏á AutoSaver
            self.autosaver.update_current_data(
                annotations=self.annotations
            )

    def undo_last(self):
        if self.annotations:
            self.annotations.pop()
            self.update_annotation_list()
            self.update_image()

    def load_batch_files(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô"""
        file_names, _ = QFileDialog.getOpenFileNames(
            self, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û", "", "Image Files (*.png *.jpg *.jpeg)"
        )
        
        for file_name in file_names:
            item = QListWidgetItem(os.path.basename(file_name))
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö dictionary
            item_data = {
                'path': file_name,
                'type': 'image',
                'page': 1,
                'original_path': file_name
            }
            item.setData(Qt.ItemDataRole.UserRole, item_data)
            self.file_list_widget.addItem(item)


    def load_image_from_path(self, file_path):
        """‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å path"""
        self.image_path = file_path
        image = QImage(file_path)
        self.original_pixmap = QPixmap.fromImage(image)
        self.show_image()
        self.annotations = []
        self.update_annotation_list()

    def save_current_annotations(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å annotations ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        if self.image_path:
            self.file_annotations[self.image_path] = self.annotations.copy()
 

    def export_annotations(self, directory):
        """export ‡πÅ‡∏ö‡∏ö JSON ‡∏õ‡∏Å‡∏ï‡∏¥"""
        for image_path, annotations in self.file_annotations.items():
            if annotations:
                base_name = os.path.basename(image_path)
                json_name = os.path.splitext(base_name)[0] + '.json'
                save_path = os.path.join(directory, json_name)

                data = {
                    'image_path': image_path,
                    'document_type': self.doc_type_combo.currentText(),
                    'image_size': {
                        'width': self.original_pixmap.width(),
                        'height': self.original_pixmap.height()
                    },
                    'annotations': annotations
                }
                
                with open(save_path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)


    def export_by_format(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£ export ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô combo box"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô export
        is_valid, errors = self.validator.validate_annotations(
            self.annotations,
            self.doc_type_combo.currentText(),
            self.original_pixmap.height(),
            self.original_pixmap.width()
        )

        if not is_valid:
            error_text = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n\n"
            error_text += "\n".join([f"- {err}" for err in errors])
            QMessageBox.warning(self, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å", error_text)
            return

        selected_format = self.export_menu.currentText()
        
        directory = QFileDialog.getExistingDirectory(self, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        if directory:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å annotations ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            if self.image_path and self.annotations:
                self.save_current_annotations()
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó autosaver
                self.autosaver.update_current_data({
                    'image_path': self.image_path,
                    'document_type': self.doc_type_combo.currentText(),
                    'annotations': self.annotations,
                    'image_size': {
                        'width': self.original_pixmap.width(),
                        'height': self.original_pixmap.height()
                    }
                })
            
            if selected_format == "JSON ‡∏õ‡∏Å‡∏ï‡∏¥":
                self.export_annotations(directory)
            else:  # LayoutLM Format
                self.export_layoutlm_format(directory)

    def validate_current(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á annotations ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        if not self.annotations:
            QMessageBox.warning(self, "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ annotation")
            return
            
        if not self.original_pixmap:
            QMessageBox.warning(self, "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
            return

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ validator
        is_valid, errors = self.validator.validate_annotations(
            self.annotations,
            self.doc_type_combo.currentText(),
            self.original_pixmap.height(),
            self.original_pixmap.width()
        )

        if is_valid:
            QMessageBox.information(
                self,
                "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
                "‡∏Å‡∏≤‡∏£ annotate ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            )
        else:
            error_text = "‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n\n"
            error_text += "\n".join([f"- {err}" for err in errors])
            QMessageBox.warning(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error_text)



def main():
    app = QApplication(sys.argv)
    window = AnnotationTool()
    window.show()
    sys.exit(app.exec())

if __name__ == '__main__':
    main()